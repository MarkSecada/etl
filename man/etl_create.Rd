% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/etl_cleanup.R, R/etl_create.R, R/etl_extract.R, R/etl_load.R, R/etl_transform.R
\name{etl_cleanup}
\alias{etl_cleanup}
\alias{etl_cleanup.default}
\alias{etl_cleanup.etl_mtcars}
\alias{etl_create}
\alias{etl_create.default}
\alias{etl_extract}
\alias{etl_extract.default}
\alias{etl_extract.etl_mtcars}
\alias{etl_load}
\alias{etl_load.default}
\alias{etl_load.etl_mtcars}
\alias{etl_transform}
\alias{etl_transform.default}
\alias{etl_transform.etl_mtcars}
\alias{etl_update}
\alias{etl_update.default}
\title{ETL functions for working with medium sized data}
\usage{
etl_cleanup(obj, ...)

\method{etl_cleanup}{default}(obj, ...)

\method{etl_cleanup}{etl_mtcars}(obj, ...)

etl_create(obj, ...)

\method{etl_create}{default}(obj, ...)

etl_update(obj, ...)

\method{etl_update}{default}(obj, ...)

etl_extract(obj, ...)

\method{etl_extract}{default}(obj, ...)

\method{etl_extract}{etl_mtcars}(obj, ...)

etl_load(obj, schema = FALSE, ...)

\method{etl_load}{default}(obj, schema = FALSE, ...)

\method{etl_load}{etl_mtcars}(obj, schema = FALSE, ...)

etl_transform(obj, ...)

\method{etl_transform}{default}(obj, ...)

\method{etl_transform}{etl_mtcars}(obj, ...)
}
\arguments{
\item{obj}{an \code{\link{etl}} object}

\item{...}{arguments passed to methods}

\item{schema}{Either a logical, a filename pointing to SQL schema file, or a character
vector containing the schema itself. If \code{schema = TRUE}, then the built-in
schema will be used. Note
that the flavor of SQL in this file must match the type of the source. That is,
if your object is of type \code{\link[dplyr]{sql_mysql}}, then make sure that
the schema you specify here is written in MySQL (and not PostgreSQL). Please
note that SQL syntax is not, in general, completely portable. Use with caution, as this may
clobber any existing data you have in an existing database.}
}
\value{
Each one of these functions returns an \code{\link{etl}} object.
}
\description{
These generic functions provide a systematic approach
for performing ETL (exchange-transform-load) operations on medium
sized data.
}
\details{
The purpose of these functions are to download data from a
particular data source from the Internet, process it, and load it
into a SQL database server.

There are four primary functions:
\describe{
 \item{etl_extract}{Download data from the Internet and store it locally in
 its raw form.}
 \item{etl_transform}{Maniuplate the raw data such that it can be loaded
 into a database table. Usually, this means converting the raw data to
 (a series of) CSV files, which are also stored locally.}
 \item{etl_load}{Load the transformed data into the database.}
 \item{etl_cleanup}{Perform housekeeping, such as deleting unnecessary
 raw data files.}
}

Additionally, two convenience function chain these operations together:
\describe{
 \item{etl_create}{Run all five in succession. This is useful when you want
 to create the database from scratch.}
 \item{etl_update}{Run all four. This is useful
 where the database already exists, but you want to insert some new data. }
}
}
\examples{

\dontrun{
if (require(RPostgreSQL)) {
  db <- src_postgres(dbname = "mtcars", user = "postgres", host = "localhost")
}
}
cars <- etl("mtcars", db)
cars \%>\%
 etl_extract() \%>\%
 etl_transform() \%>\%
 etl_load() \%>\%
 etl_cleanup()

cars \%>\%
 tbl(from = "mtcars") \%>\%
 group_by(cyl) \%>\%
 summarise(N = n(), mean_mpg = mean(mpg))

 # do it all in one step
 cars \%>\%
   etl_create()
# Instantiate the etl object
cars <- etl("mtcars")
str(cars)

# Do it step-by-step
cars \%>\%
  etl_extract() \%>\%
  etl_transform() \%>\%
  etl_load()

# Note the rather imprecise data types for the columns. These are the default.
tbl(cars, "mtcars")

# But you can also specify your own schema if you want
schema <- system.file("sql/mtcars.sqlite3", package = "etl")
etl_load(cars, schema)

# notice the more specific data types
tbl(cars, "mtcars")
}
\seealso{
\code{\link{etl}}
}

